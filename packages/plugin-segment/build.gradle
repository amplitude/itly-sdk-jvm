plugins {
    id 'org.jetbrains.kotlin.multiplatform'
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply from: rootProject.file('gradle/publish-mpp.gradle')
apply from: rootProject.file('gradle/android-library.gradle')

//task dokkaCommon(type: org.jetbrains.dokka.gradle.DokkaTask) {
//    impliedPlatforms = ["Common"]
//    kotlinTasks { [] }
//    outputFormat = 'html'
//    outputDirectory = "$buildDir/javadoc/common"
//    sourceRoot {
//        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
//        platforms = ["Common"]
//    }
//}

//task dokkaJvm(type: org.jetbrains.dokka.gradle.DokkaTask) {
//    outputFormat("html")
//    outputDirectory("$buildDir/javadoc/jvm")
//    sourceRoot {
//        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
//        platforms = ["Common"]
//    }
//    sourceRoot {
//        path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
//        platforms = ["JVM"]
//    }
//}
//

//val dokkaJar by tasks.creating(Jar::class) {
//    group = JavaBasePlugin.DOCUMENTATION_GROUP
//    description = "Assembles Kotlin docs with Dokka"
//    classifier = "javadoc"
//    from(tasks.dokka)
//}

//task dokkaJvm(type: org.jetbrains.dokka.gradle.DokkaTask) {
//    impliedPlatforms = ["JVM", "Common"]
//    kotlinTasks { [] }
//    outputFormat = 'html'
//    outputDirectory = "$buildDir/javadoc/jvm"
//    sourceRoot {
//        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
//        platforms = ["Common"]
//    }
//    sourceRoot {
//        path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
//        platforms = ["JVM"]
//    }
//}
//
//task emptySourcesJar(type: Jar) {
//    classifier 'sources'
//}
//task emptyJavadocJar(type: Jar) {
//    classifier 'javadoc'
//}
//
//task dokkaJavadocCommonJar(type: Jar, dependsOn: dokkaCommon) {
//    classifier 'javadoc'
//    from "$buildDir/javadoc/common"
//}
//
//task dokkaJavadocJvmJar(type: Jar, dependsOn: dokkaJvm) {
//    classifier 'javadoc'
//    from "$buildDir/javadoc/jvm"
//}

kotlin {
    jvm("jvm") {
        compilations.main.kotlinOptions {
            // Setup the Kotlin compiler options for the 'main' compilation:
            jvmTarget = "1.8"
        }
    }

    android() {
        publishLibraryVariants("release", "debug")
        publishLibraryVariantsGroupedByFlavor = true
    }

    targets.all {
        compilations.all {
            kotlinOptions {
                // jvmTarget = "1.8"
                allWarningsAsErrors = false
            }
        }
    }

    sourceSets {
        // COMMON
        commonMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation project(":packages:sdk-core")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit5')
                implementation project(":packages:test-fixtures")
            }
        }

        // ANDROID
        androidMain {
            dependsOn commonMain
            dependencies {
                implementation 'com.segment.analytics.android:analytics:4.8.0'
            }
        }
        androidTest {
            dependsOn commonTest
        }

        // JVM
        jvmMain {
            dependsOn commonMain
            dependencies {
                implementation 'com.segment.analytics.java:analytics:2.1.1'
                // Android has it's own org.json included by default
                implementation "$orgJsonImplementation"
            }
        }
        jvmTest {
            dependsOn commonTest
        }
    }

    configure([targets["metadata"], jvm(), android()]) {
        mavenPublication {
            groupId = project.group
            version = project.version

            artifact(jvmDocsJar)

            pom {
                name = 'Iteratively Segment Plugin'
                description = 'Iteratively Analytics SDK for JVM'
                url = 'https://iterative.ly'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'iteratively-justin'
                        name = 'Justin Fiedler'
                        email = 'justin@iterative.ly'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/iterativelyhq/itly-sdk-jvm.git'
                    developerConnection = 'scm:git:https://github.com/iterativelyhq/itly-sdk-jvm.git'
                    url = 'https://github.com/iterativelyhq/itly-sdk-jvm'
                }
            }

//            if (pub.artifactId == "plugin-segment-android") {
//                def dependenciesNode = asNode().appendNode('dependencies')
//                appendDepNode(dependenciesNode, 'org.jetbrains.kotlin', 'kotlin-stdlib', kotlin_version, 'runtime')
//            }

//            afterEvaluate {
//                publications {
//                    maven(MavenPublication) {
//                        artifactId "arbor-android"
//                        artifact 'android/build/outputs/aar/android-release.aar'
//                        artifact dokkaJavadocAndroidJar
//                        artifact androidSourcesJar
//                    }
//                }
//                publications.getByName('jvm') {
//                    artifact dokkaJavadocJvmJar
//                }
//                publications.getByName('kotlinMultiplatform') {
//                    artifact dokkaJavadocCommonJar
//                    artifact emptySourcesJar
//                }
//                publications.getByName('metadata') {
//                    artifact dokkaJavadocCommonJar
//                }
//            }
        }
    }
}

apply from: rootProject.file('gradle/dokka-mpp-android-jvm.gradle')

//tasks.dokka {
//    outputFormat = "html"
//    outputDirectory = "$buildDir/javadoc"
//}

//task jvmDocsJar(type: Jar, dependsOn: dokkaHtml) {
//    classifier 'javadoc'
////    from "$buildDir/javadoc/jvm"
//    from "$buildDir/dokka"
//}
//

//// WORKS
//dokkaHtml {
//    outputDirectory = "$buildDir/dokka"
//
//    dokkaSourceSets {
////        jvmMain { // The same name as Kotlin Multiplatform plugin source set for `customName` platform, so the sources are fetched automatically
////            includes = ['packages.md', 'extra.md']
////            samples = ['samples/basic.kt', 'samples/advanced.kt']
////        }
//
//        jvmMain { // Different name, so source roots, classpath and platform must be passed explicitly.
//            sourceRoot {
//                path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
//            }
//            sourceRoot {
//                path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
//            }
//        }
//
//        androidMain { // Different name, so source roots, classpath and platform must be passed explicitly.
//            sourceRoot {
//                path = kotlin.sourceSets.androidMain.kotlin.srcDirs[0]
//            }
//            sourceRoot {
//                path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
//            }
//        }
//    }
//}
